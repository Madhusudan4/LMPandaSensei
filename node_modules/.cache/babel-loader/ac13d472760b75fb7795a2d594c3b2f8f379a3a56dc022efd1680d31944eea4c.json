{"ast":null,"code":"// src/services/aiService.js\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Initialize the API with your API key\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY);\nexport const queryGeminiAI = async message => {\n  try {\n    // Make sure API key is available\n    if (!process.env.REACT_APP_GEMINI_API_KEY) {\n      console.error(\"Missing Gemini API key. Set REACT_APP_GEMINI_API_KEY in your environment.\");\n      throw new Error(\"API key not configured\");\n    }\n    console.log(\"Sending query to Gemini API:\", message);\n\n    // Get the model\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-pro\"\n    });\n\n    // Generate content\n    const result = await model.generateContent(message);\n    const response = await result.response;\n    const text = response.text();\n    console.log(\"Received response from Gemini API\");\n    return text;\n  } catch (error) {\n    console.error(\"Error querying Gemini AI:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["GoogleGenerativeAI","genAI","process","env","REACT_APP_GEMINI_API_KEY","queryGeminiAI","message","console","error","Error","log","model","getGenerativeModel","result","generateContent","response","text"],"sources":["/Users/madhu.sudhan/Documents/logistics-chatbot/src/services/aiService.js"],"sourcesContent":["// src/services/aiService.js\nimport { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Initialize the API with your API key\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY);\n\nexport const queryGeminiAI = async (message) => {\n  try {\n    // Make sure API key is available\n    if (!process.env.REACT_APP_GEMINI_API_KEY) {\n      console.error(\"Missing Gemini API key. Set REACT_APP_GEMINI_API_KEY in your environment.\");\n      throw new Error(\"API key not configured\");\n    }\n\n    console.log(\"Sending query to Gemini API:\", message);\n    \n    // Get the model\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\n    \n    // Generate content\n    const result = await model.generateContent(message);\n    const response = await result.response;\n    const text = response.text();\n    \n    console.log(\"Received response from Gemini API\");\n    return text;\n  } catch (error) {\n    console.error(\"Error querying Gemini AI:\", error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA;AACA,SAASA,kBAAkB,QAAQ,uBAAuB;;AAE1D;AACA,MAAMC,KAAK,GAAG,IAAID,kBAAkB,CAACE,OAAO,CAACC,GAAG,CAACC,wBAAwB,CAAC;AAE1E,OAAO,MAAMC,aAAa,GAAG,MAAOC,OAAO,IAAK;EAC9C,IAAI;IACF;IACA,IAAI,CAACJ,OAAO,CAACC,GAAG,CAACC,wBAAwB,EAAE;MACzCG,OAAO,CAACC,KAAK,CAAC,2EAA2E,CAAC;MAC1F,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEAF,OAAO,CAACG,GAAG,CAAC,8BAA8B,EAAEJ,OAAO,CAAC;;IAEpD;IACA,MAAMK,KAAK,GAAGV,KAAK,CAACW,kBAAkB,CAAC;MAAED,KAAK,EAAE;IAAa,CAAC,CAAC;;IAE/D;IACA,MAAME,MAAM,GAAG,MAAMF,KAAK,CAACG,eAAe,CAACR,OAAO,CAAC;IACnD,MAAMS,QAAQ,GAAG,MAAMF,MAAM,CAACE,QAAQ;IACtC,MAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAI,CAAC,CAAC;IAE5BT,OAAO,CAACG,GAAG,CAAC,mCAAmC,CAAC;IAChD,OAAOM,IAAI;EACb,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}