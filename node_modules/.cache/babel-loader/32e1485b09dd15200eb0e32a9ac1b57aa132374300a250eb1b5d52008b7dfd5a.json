{"ast":null,"code":"// src/services/documentService.js\nimport { setDocumentContext } from './aiService';\nexport const processDocument = async file => {\n  return new Promise((resolve, reject) => {\n    try {\n      const reader = new FileReader();\n      reader.onload = async e => {\n        try {\n          // For demonstration we'll simulate document text extraction\n          // In a real app, you'd have more sophisticated document parsing\n          const content = e.target.result;\n\n          // Basic document chunking - split by paragraphs and sections\n          let chunks = [];\n          if (file.type === 'application/pdf') {\n            // Simulate PDF processing\n            chunks = simulatePdfProcessing(content);\n          } else if (file.type.includes('text')) {\n            // Process text files\n            chunks = content.split('\\n\\n').filter(chunk => chunk.trim().length > 0);\n          } else if (file.type.includes('word') || file.name.endsWith('.docx') || file.name.endsWith('.doc')) {\n            // Simulate Word document processing\n            chunks = simulateWordProcessing(content);\n          } else {\n            // Generic text extraction\n            chunks = content.split('\\n').filter(chunk => chunk.trim().length > 0);\n          }\n\n          // Update the AI service with document context\n          setDocumentContext(chunks);\n          resolve(chunks.length);\n        } catch (error) {\n          console.error(\"Error processing document content:\", error);\n          reject(error);\n        }\n      };\n      reader.onerror = () => {\n        reject(new Error(\"Failed to read the file\"));\n      };\n\n      // Read the file based on type\n      if (file.type === 'application/pdf' || file.type.includes('word') || file.type.includes('application/vnd.openxmlformats-officedocument')) {\n        reader.readAsArrayBuffer(file);\n      } else {\n        reader.readAsText(file);\n      }\n    } catch (error) {\n      console.error(\"Error setting up document processing:\", error);\n      reject(error);\n    }\n  });\n};\n\n// Simulation functions for document processing\nfunction simulatePdfProcessing(content) {\n  // This is a placeholder. In a real app, you'd use a PDF.js or similar library\n  // For now, we'll create fake chunks based on the file size\n  const chunks = [];\n  const size = content.byteLength;\n  const numChunks = Math.max(3, Math.min(10, Math.floor(size / 5000)));\n  for (let i = 0; i < numChunks; i++) {\n    chunks.push(`[Document section ${i + 1}] This section contains logistics information about shipping routes, delivery timeframes, and package handling procedures for the Indian market. Key points include delivery standards, shipping zones, and logistics operations.`);\n  }\n  return chunks;\n}\nfunction simulateWordProcessing(content) {\n  // Placeholder for Word document processing\n  const chunks = [];\n  const size = content.byteLength;\n  const numChunks = Math.max(3, Math.min(8, Math.floor(size / 4000)));\n  for (let i = 0; i < numChunks; i++) {\n    chunks.push(`[Document section ${i + 1}] This section contains logistics information about delivery processes, customer service protocols, and last-mile delivery operations in India. Topics include urban delivery strategies, rural logistics challenges, and delivery scheduling procedures.`);\n  }\n  return chunks;\n}","map":{"version":3,"names":["setDocumentContext","processDocument","file","Promise","resolve","reject","reader","FileReader","onload","e","content","target","result","chunks","type","simulatePdfProcessing","includes","split","filter","chunk","trim","length","name","endsWith","simulateWordProcessing","error","console","onerror","Error","readAsArrayBuffer","readAsText","size","byteLength","numChunks","Math","max","min","floor","i","push"],"sources":["/Users/madhu.sudhan/Documents/logistics-chatbot/src/services/documentService.js"],"sourcesContent":["// src/services/documentService.js\nimport { setDocumentContext } from './aiService';\n\nexport const processDocument = async (file) => {\n  return new Promise((resolve, reject) => {\n    try {\n      const reader = new FileReader();\n      \n      reader.onload = async (e) => {\n        try {\n          // For demonstration we'll simulate document text extraction\n          // In a real app, you'd have more sophisticated document parsing\n          const content = e.target.result;\n          \n          // Basic document chunking - split by paragraphs and sections\n          let chunks = [];\n          \n          if (file.type === 'application/pdf') {\n            // Simulate PDF processing\n            chunks = simulatePdfProcessing(content);\n          } else if (file.type.includes('text')) {\n            // Process text files\n            chunks = content.split('\\n\\n')\n              .filter(chunk => chunk.trim().length > 0);\n          } else if (file.type.includes('word') || file.name.endsWith('.docx') || file.name.endsWith('.doc')) {\n            // Simulate Word document processing\n            chunks = simulateWordProcessing(content);\n          } else {\n            // Generic text extraction\n            chunks = content.split('\\n')\n              .filter(chunk => chunk.trim().length > 0);\n          }\n          \n          // Update the AI service with document context\n          setDocumentContext(chunks);\n          \n          resolve(chunks.length);\n        } catch (error) {\n          console.error(\"Error processing document content:\", error);\n          reject(error);\n        }\n      };\n      \n      reader.onerror = () => {\n        reject(new Error(\"Failed to read the file\"));\n      };\n      \n      // Read the file based on type\n      if (file.type === 'application/pdf' || file.type.includes('word') || file.type.includes('application/vnd.openxmlformats-officedocument')) {\n        reader.readAsArrayBuffer(file);\n      } else {\n        reader.readAsText(file);\n      }\n    } catch (error) {\n      console.error(\"Error setting up document processing:\", error);\n      reject(error);\n    }\n  });\n};\n\n// Simulation functions for document processing\nfunction simulatePdfProcessing(content) {\n  // This is a placeholder. In a real app, you'd use a PDF.js or similar library\n  // For now, we'll create fake chunks based on the file size\n  const chunks = [];\n  const size = content.byteLength;\n  const numChunks = Math.max(3, Math.min(10, Math.floor(size / 5000)));\n  \n  for (let i = 0; i < numChunks; i++) {\n    chunks.push(`[Document section ${i+1}] This section contains logistics information about shipping routes, delivery timeframes, and package handling procedures for the Indian market. Key points include delivery standards, shipping zones, and logistics operations.`);\n  }\n  \n  return chunks;\n}\n\nfunction simulateWordProcessing(content) {\n  // Placeholder for Word document processing\n  const chunks = [];\n  const size = content.byteLength;\n  const numChunks = Math.max(3, Math.min(8, Math.floor(size / 4000)));\n  \n  for (let i = 0; i < numChunks; i++) {\n    chunks.push(`[Document section ${i+1}] This section contains logistics information about delivery processes, customer service protocols, and last-mile delivery operations in India. Topics include urban delivery strategies, rural logistics challenges, and delivery scheduling procedures.`);\n  }\n  \n  return chunks;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}