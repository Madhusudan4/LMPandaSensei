{"ast":null,"code":"// src/services/aiService.js\nlet documentContext = [];\nexport const setDocumentContext = context => {\n  documentContext = context;\n  console.log(\"Document context updated:\", documentContext.length, \"chunks\");\n};\nexport const testGeminiAPIConnection = async () => {\n  try {\n    const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n    if (!API_KEY) {\n      return {\n        success: false,\n        message: \"API key not configured\"\n      };\n    }\n\n    // Try the simplest possible request to the API\n    const testMessage = \"Hello, this is a test message.\";\n    const testEndpoint = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent\";\n    const response = await fetch(`${testEndpoint}?key=${API_KEY}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: testMessage\n          }]\n        }]\n      })\n    });\n    const statusCode = response.status;\n    let responseText = \"\";\n    try {\n      const responseData = await response.json();\n      responseText = JSON.stringify(responseData, null, 2);\n    } catch (e) {\n      responseText = await response.text();\n    }\n    return {\n      success: response.ok,\n      statusCode,\n      responseText,\n      message: response.ok ? \"API connection successful\" : `API error: ${statusCode}`\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `Connection error: ${error.message}`,\n      error\n    };\n  }\n};\nconst fallbackGeminiQuery = async (message, apiKey) => {\n  try {\n    console.log(\"Attempting fallback API call...\");\n\n    // This is the older/alternative endpoint\n    const fallbackUrl = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent\";\n    const requestBody = {\n      contents: [{\n        parts: [{\n          text: message\n        }]\n      }]\n    };\n    const response = await fetch(`${fallbackUrl}?key=${apiKey}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(requestBody)\n    });\n    if (!response.ok) {\n      throw new Error(`Fallback API error: ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.candidates && data.candidates.length > 0 && data.candidates[0].content && data.candidates[0].content.parts) {\n      return data.candidates[0].content.parts.map(part => part.text || \"\").join(\"\");\n    }\n    throw new Error(\"Unexpected fallback API response structure\");\n  } catch (error) {\n    console.error(\"Fallback API error:\", error);\n    throw error;\n  }\n};\nexport const queryGeminiAI = async message => {\n  try {\n    const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n\n    // Better error checking for API key\n    if (!API_KEY) {\n      console.error(\"Missing Gemini API key. Set REACT_APP_GEMINI_API_KEY in your environment.\");\n      throw new Error(\"API key not configured\");\n    }\n    console.log(\"Using API key starting with:\", API_KEY.substring(0, 3) + \"...\" + API_KEY.slice(-3));\n\n    // Prepare the full prompt\n    let fullPrompt = \"You are an AI assistant specializing in last mile logistics in India. \";\n    fullPrompt += \"Provide detailed, accurate information about delivery services, tracking, shipping costs, and logistics coverage areas in India. \";\n    fullPrompt += \"Be helpful, concise, and focus on Indian logistics context.\\n\\n\";\n    fullPrompt += \"User question: \" + message;\n\n    // Add document context if available\n    if (documentContext && documentContext.length > 0) {\n      fullPrompt += \"\\n\\nReference these document sections when applicable:\\n\";\n      const relevantChunks = documentContext.slice(0, 3);\n      relevantChunks.forEach((chunk, i) => {\n        fullPrompt += `\\nSection ${i + 1}: ${chunk}\\n`;\n      });\n      fullPrompt += \"\\nPlease use this document information when relevant to answer the user's question.\";\n    }\n\n    // Try beta endpoint first (most reliable)\n    const apiUrl = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent\";\n\n    // Format the request \n    const requestBody = {\n      contents: [{\n        parts: [{\n          text: fullPrompt\n        }]\n      }],\n      generationConfig: {\n        temperature: 0.7,\n        maxOutputTokens: 800\n      }\n    };\n    console.log(\"Sending request to Gemini API at:\", apiUrl);\n\n    // Send the request - note the API key is passed as a query parameter\n    const response = await fetch(`${apiUrl}?key=${API_KEY}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(requestBody)\n    });\n    console.log(\"API Response status:\", response.status);\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"API Error:\", response.status, errorText);\n\n      // Special handling for common errors\n      if (response.status === 404) {\n        throw new Error(\"API endpoint not found. Please check URL and API version.\");\n      } else if (response.status === 403) {\n        throw new Error(\"API access forbidden. Check if API key has correct permissions.\");\n      } else if (response.status === 429) {\n        throw new Error(\"Rate limit exceeded. Please try again later.\");\n      } else {\n        throw new Error(`API error: ${response.status} ${errorText}`);\n      }\n    }\n    const data = await response.json();\n\n    // Extract text from the response\n    let text = \"\";\n    if (data.candidates && data.candidates.length > 0 && data.candidates[0].content && data.candidates[0].content.parts) {\n      text = data.candidates[0].content.parts.map(part => part.text || \"\").join(\"\");\n      console.log(\"Successfully extracted text, length:\", text.length);\n    } else {\n      console.warn(\"Unexpected API response structure:\", JSON.stringify(data, null, 2));\n      throw new Error(\"Unexpected API response structure\");\n    }\n    return text;\n  } catch (error) {\n    console.error(\"Error in primary Gemini API call:\", error);\n\n    // Get API key for fallback attempt\n    const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n\n    // Try fallback if it was a 404 error (endpoint not found)\n    if (error.message && (error.message.includes(\"404\") || error.message.includes(\"endpoint not found\"))) {\n      try {\n        console.log(\"Attempting fallback API due to 404 error\");\n        return await fallbackGeminiQuery(message, API_KEY);\n      } catch (fallbackError) {\n        console.error(\"Fallback API also failed:\", fallbackError);\n        throw fallbackError;\n      }\n    }\n\n    // Alternative approach - try v1 endpoint if beta endpoint fails\n    if (error.message && error.message.includes(\"API error\")) {\n      try {\n        console.log(\"Trying v1 endpoint as a fallback\");\n        const v1Url = \"https://generativelanguage.googleapis.com/v1/models/gemini-1.0-pro:generateContent\";\n        const simpleRequestBody = {\n          contents: [{\n            parts: [{\n              text: message\n            }]\n          }]\n        };\n        const v1Response = await fetch(`${v1Url}?key=${API_KEY}`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(simpleRequestBody)\n        });\n        if (!v1Response.ok) {\n          throw new Error(`V1 API error: ${v1Response.status}`);\n        }\n        const v1Data = await v1Response.json();\n        if (v1Data.candidates && v1Data.candidates.length > 0 && v1Data.candidates[0].content && v1Data.candidates[0].content.parts) {\n          return v1Data.candidates[0].content.parts.map(part => part.text || \"\").join(\"\");\n        }\n      } catch (v1Error) {\n        console.error(\"V1 endpoint fallback also failed:\", v1Error);\n      }\n    }\n\n    // If all fallbacks failed, throw the original error\n    throw error;\n  }\n};","map":{"version":3,"names":["documentContext","setDocumentContext","context","console","log","length","testGeminiAPIConnection","API_KEY","process","env","REACT_APP_GEMINI_API_KEY","success","message","testMessage","testEndpoint","response","fetch","method","headers","body","JSON","stringify","contents","parts","text","statusCode","status","responseText","responseData","json","e","ok","error","fallbackGeminiQuery","apiKey","fallbackUrl","requestBody","Error","data","candidates","content","map","part","join","queryGeminiAI","substring","slice","fullPrompt","relevantChunks","forEach","chunk","i","apiUrl","generationConfig","temperature","maxOutputTokens","errorText","warn","includes","fallbackError","v1Url","simpleRequestBody","v1Response","v1Data","v1Error"],"sources":["/Users/madhu.sudhan/Documents/logistics-chatbot/src/services/aiService.js"],"sourcesContent":["// src/services/aiService.js\nlet documentContext = [];\n\nexport const setDocumentContext = (context) => {\n  documentContext = context;\n  console.log(\"Document context updated:\", documentContext.length, \"chunks\");\n};\n\nexport const testGeminiAPIConnection = async () => {\n  try {\n    const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n    \n    if (!API_KEY) {\n      return { success: false, message: \"API key not configured\" };\n    }\n    \n    // Try the simplest possible request to the API\n    const testMessage = \"Hello, this is a test message.\";\n    const testEndpoint = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent\";\n    \n    const response = await fetch(\n      `${testEndpoint}?key=${API_KEY}`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          contents: [{ parts: [{ text: testMessage }] }]\n        })\n      }\n    );\n    \n    const statusCode = response.status;\n    let responseText = \"\";\n    \n    try {\n      const responseData = await response.json();\n      responseText = JSON.stringify(responseData, null, 2);\n    } catch (e) {\n      responseText = await response.text();\n    }\n    \n    return {\n      success: response.ok,\n      statusCode,\n      responseText,\n      message: response.ok ? \"API connection successful\" : `API error: ${statusCode}`\n    };\n  } catch (error) {\n    return {\n      success: false,\n      message: `Connection error: ${error.message}`,\n      error\n    };\n  }\n};\n\nconst fallbackGeminiQuery = async (message, apiKey) => {\n  try {\n    console.log(\"Attempting fallback API call...\");\n    \n    // This is the older/alternative endpoint\n    const fallbackUrl = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent\";\n    \n    const requestBody = {\n      contents: [\n        {\n          parts: [\n            { text: message }\n          ]\n        }\n      ]\n    };\n    \n    const response = await fetch(\n      `${fallbackUrl}?key=${apiKey}`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(requestBody)\n      }\n    );\n    \n    if (!response.ok) {\n      throw new Error(`Fallback API error: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    \n    if (data.candidates && \n        data.candidates.length > 0 && \n        data.candidates[0].content && \n        data.candidates[0].content.parts) {\n      return data.candidates[0].content.parts\n        .map(part => part.text || \"\")\n        .join(\"\");\n    }\n    \n    throw new Error(\"Unexpected fallback API response structure\");\n  } catch (error) {\n    console.error(\"Fallback API error:\", error);\n    throw error;\n  }\n};\n\nexport const queryGeminiAI = async (message) => {\n  try {\n    const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n    \n    // Better error checking for API key\n    if (!API_KEY) {\n      console.error(\"Missing Gemini API key. Set REACT_APP_GEMINI_API_KEY in your environment.\");\n      throw new Error(\"API key not configured\");\n    }\n\n    console.log(\"Using API key starting with:\", API_KEY.substring(0, 3) + \"...\" + API_KEY.slice(-3));\n\n    // Prepare the full prompt\n    let fullPrompt = \"You are an AI assistant specializing in last mile logistics in India. \";\n    fullPrompt += \"Provide detailed, accurate information about delivery services, tracking, shipping costs, and logistics coverage areas in India. \";\n    fullPrompt += \"Be helpful, concise, and focus on Indian logistics context.\\n\\n\";\n    fullPrompt += \"User question: \" + message;\n    \n    // Add document context if available\n    if (documentContext && documentContext.length > 0) {\n      fullPrompt += \"\\n\\nReference these document sections when applicable:\\n\";\n      const relevantChunks = documentContext.slice(0, 3);\n      relevantChunks.forEach((chunk, i) => {\n        fullPrompt += `\\nSection ${i+1}: ${chunk}\\n`;\n      });\n      fullPrompt += \"\\nPlease use this document information when relevant to answer the user's question.\";\n    }\n\n    // Try beta endpoint first (most reliable)\n    const apiUrl = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent\";\n    \n    // Format the request \n    const requestBody = {\n      contents: [\n        {\n          parts: [\n            { text: fullPrompt }\n          ]\n        }\n      ],\n      generationConfig: {\n        temperature: 0.7,\n        maxOutputTokens: 800\n      }\n    };\n    \n    console.log(\"Sending request to Gemini API at:\", apiUrl);\n    \n    // Send the request - note the API key is passed as a query parameter\n    const response = await fetch(\n      `${apiUrl}?key=${API_KEY}`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(requestBody)\n      }\n    );\n\n    console.log(\"API Response status:\", response.status);\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"API Error:\", response.status, errorText);\n      \n      // Special handling for common errors\n      if (response.status === 404) {\n        throw new Error(\"API endpoint not found. Please check URL and API version.\");\n      } else if (response.status === 403) {\n        throw new Error(\"API access forbidden. Check if API key has correct permissions.\");\n      } else if (response.status === 429) {\n        throw new Error(\"Rate limit exceeded. Please try again later.\");\n      } else {\n        throw new Error(`API error: ${response.status} ${errorText}`);\n      }\n    }\n\n    const data = await response.json();\n    \n    // Extract text from the response\n    let text = \"\";\n    if (data.candidates && \n        data.candidates.length > 0 && \n        data.candidates[0].content && \n        data.candidates[0].content.parts) {\n      text = data.candidates[0].content.parts\n        .map(part => part.text || \"\")\n        .join(\"\");\n      console.log(\"Successfully extracted text, length:\", text.length);\n    } else {\n      console.warn(\"Unexpected API response structure:\", JSON.stringify(data, null, 2));\n      throw new Error(\"Unexpected API response structure\");\n    }\n    \n    return text;\n  } catch (error) {\n    console.error(\"Error in primary Gemini API call:\", error);\n    \n    // Get API key for fallback attempt\n    const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n    \n    // Try fallback if it was a 404 error (endpoint not found)\n    if (error.message && (\n        error.message.includes(\"404\") || \n        error.message.includes(\"endpoint not found\")\n      )) {\n      try {\n        console.log(\"Attempting fallback API due to 404 error\");\n        return await fallbackGeminiQuery(message, API_KEY);\n      } catch (fallbackError) {\n        console.error(\"Fallback API also failed:\", fallbackError);\n        throw fallbackError;\n      }\n    }\n    \n    // Alternative approach - try v1 endpoint if beta endpoint fails\n    if (error.message && error.message.includes(\"API error\")) {\n      try {\n        console.log(\"Trying v1 endpoint as a fallback\");\n        const v1Url = \"https://generativelanguage.googleapis.com/v1/models/gemini-1.0-pro:generateContent\";\n        \n        const simpleRequestBody = {\n          contents: [\n            {\n              parts: [\n                { text: message }\n              ]\n            }\n          ]\n        };\n        \n        const v1Response = await fetch(\n          `${v1Url}?key=${API_KEY}`,\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(simpleRequestBody)\n          }\n        );\n        \n        if (!v1Response.ok) {\n          throw new Error(`V1 API error: ${v1Response.status}`);\n        }\n        \n        const v1Data = await v1Response.json();\n        \n        if (v1Data.candidates && \n            v1Data.candidates.length > 0 && \n            v1Data.candidates[0].content && \n            v1Data.candidates[0].content.parts) {\n          return v1Data.candidates[0].content.parts\n            .map(part => part.text || \"\")\n            .join(\"\");\n        }\n      } catch (v1Error) {\n        console.error(\"V1 endpoint fallback also failed:\", v1Error);\n      }\n    }\n    \n    // If all fallbacks failed, throw the original error\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}