{"ast":null,"code":"// src/services/aiService.js\nexport const queryGeminiAI = async message => {\n  try {\n    const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n\n    // Make sure API key is available\n    if (!API_KEY) {\n      console.error(\"Missing Gemini API key. Set REACT_APP_GEMINI_API_KEY in your environment.\");\n      throw new Error(\"API key not configured\");\n    }\n    console.log(\"Sending query to Gemini API:\", message);\n\n    // Construct a more instructive system message\n    const systemMessage = `You are an AI assistant specializing in last mile logistics for India. You provide detailed information about delivery services, tracking, shipping costs, and logistics coverage areas in India. Be polite, helpful, and provide specific information about Indian logistics whenever possible.`;\n\n    // Format the request\n    const requestBody = {\n      contents: [{\n        parts: [{\n          text: systemMessage\n        }, {\n          text: message\n        }]\n      }],\n      generationConfig: {\n        temperature: 0.7,\n        maxOutputTokens: 1024\n      }\n    };\n\n    // Log the actual request body to debug\n    console.log(\"Request payload:\", JSON.stringify(requestBody, null, 2));\n\n    // Send the request\n    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${API_KEY}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(requestBody)\n    });\n\n    // Handle errors\n    if (!response.ok) {\n      const errorBody = await response.text();\n      console.error(\"API Error:\", response.status, errorBody);\n      throw new Error(`API error: ${response.status} ${errorBody}`);\n    }\n\n    // Parse the response\n    const data = await response.json();\n    console.log(\"Full API response:\", JSON.stringify(data, null, 2));\n\n    // Extract text from the response\n    let text = \"\";\n    if (data.candidates && data.candidates.length > 0 && data.candidates[0].content && data.candidates[0].content.parts) {\n      text = data.candidates[0].content.parts.map(part => part.text || \"\").join(\"\");\n    } else {\n      console.warn(\"Unexpected API response structure:\", data);\n      throw new Error(\"Unexpected API response structure\");\n    }\n    return text;\n  } catch (error) {\n    console.error(\"Error in queryGeminiAI:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["queryGeminiAI","message","API_KEY","process","env","REACT_APP_GEMINI_API_KEY","console","error","Error","log","systemMessage","requestBody","contents","parts","text","generationConfig","temperature","maxOutputTokens","JSON","stringify","response","fetch","method","headers","body","ok","errorBody","status","data","json","candidates","length","content","map","part","join","warn"],"sources":["/Users/madhu.sudhan/Documents/logistics-chatbot/src/services/aiService.js"],"sourcesContent":["// src/services/aiService.js\nexport const queryGeminiAI = async (message) => {\n  try {\n    const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n    \n    // Make sure API key is available\n    if (!API_KEY) {\n      console.error(\"Missing Gemini API key. Set REACT_APP_GEMINI_API_KEY in your environment.\");\n      throw new Error(\"API key not configured\");\n    }\n\n    console.log(\"Sending query to Gemini API:\", message);\n    \n    // Construct a more instructive system message\n    const systemMessage = `You are an AI assistant specializing in last mile logistics for India. You provide detailed information about delivery services, tracking, shipping costs, and logistics coverage areas in India. Be polite, helpful, and provide specific information about Indian logistics whenever possible.`;\n    \n    // Format the request\n    const requestBody = {\n      contents: [\n        {\n          parts: [\n            { text: systemMessage },\n            { text: message }\n          ]\n        }\n      ],\n      generationConfig: {\n        temperature: 0.7,\n        maxOutputTokens: 1024\n      }\n    };\n    \n    // Log the actual request body to debug\n    console.log(\"Request payload:\", JSON.stringify(requestBody, null, 2));\n    \n    // Send the request\n    const response = await fetch(\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${API_KEY}`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(requestBody)\n      }\n    );\n\n    // Handle errors\n    if (!response.ok) {\n      const errorBody = await response.text();\n      console.error(\"API Error:\", response.status, errorBody);\n      throw new Error(`API error: ${response.status} ${errorBody}`);\n    }\n\n    // Parse the response\n    const data = await response.json();\n    console.log(\"Full API response:\", JSON.stringify(data, null, 2));\n    \n    // Extract text from the response\n    let text = \"\";\n    if (data.candidates && \n        data.candidates.length > 0 && \n        data.candidates[0].content && \n        data.candidates[0].content.parts) {\n      text = data.candidates[0].content.parts\n        .map(part => part.text || \"\")\n        .join(\"\");\n    } else {\n      console.warn(\"Unexpected API response structure:\", data);\n      throw new Error(\"Unexpected API response structure\");\n    }\n    \n    return text;\n  } catch (error) {\n    console.error(\"Error in queryGeminiAI:\", error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,aAAa,GAAG,MAAOC,OAAO,IAAK;EAC9C,IAAI;IACF,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;;IAEpD;IACA,IAAI,CAACH,OAAO,EAAE;MACZI,OAAO,CAACC,KAAK,CAAC,2EAA2E,CAAC;MAC1F,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEAF,OAAO,CAACG,GAAG,CAAC,8BAA8B,EAAER,OAAO,CAAC;;IAEpD;IACA,MAAMS,aAAa,GAAG,kSAAkS;;IAExT;IACA,MAAMC,WAAW,GAAG;MAClBC,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,CACL;UAAEC,IAAI,EAAEJ;QAAc,CAAC,EACvB;UAAEI,IAAI,EAAEb;QAAQ,CAAC;MAErB,CAAC,CACF;MACDc,gBAAgB,EAAE;QAChBC,WAAW,EAAE,GAAG;QAChBC,eAAe,EAAE;MACnB;IACF,CAAC;;IAED;IACAX,OAAO,CAACG,GAAG,CAAC,kBAAkB,EAAES,IAAI,CAACC,SAAS,CAACR,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;;IAErE;IACA,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAC1B,0FAA0FnB,OAAO,EAAE,EACnG;MACEoB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEN,IAAI,CAACC,SAAS,CAACR,WAAW;IAClC,CACF,CAAC;;IAED;IACA,IAAI,CAACS,QAAQ,CAACK,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMN,QAAQ,CAACN,IAAI,CAAC,CAAC;MACvCR,OAAO,CAACC,KAAK,CAAC,YAAY,EAAEa,QAAQ,CAACO,MAAM,EAAED,SAAS,CAAC;MACvD,MAAM,IAAIlB,KAAK,CAAC,cAAcY,QAAQ,CAACO,MAAM,IAAID,SAAS,EAAE,CAAC;IAC/D;;IAEA;IACA,MAAME,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClCvB,OAAO,CAACG,GAAG,CAAC,oBAAoB,EAAES,IAAI,CAACC,SAAS,CAACS,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;;IAEhE;IACA,IAAId,IAAI,GAAG,EAAE;IACb,IAAIc,IAAI,CAACE,UAAU,IACfF,IAAI,CAACE,UAAU,CAACC,MAAM,GAAG,CAAC,IAC1BH,IAAI,CAACE,UAAU,CAAC,CAAC,CAAC,CAACE,OAAO,IAC1BJ,IAAI,CAACE,UAAU,CAAC,CAAC,CAAC,CAACE,OAAO,CAACnB,KAAK,EAAE;MACpCC,IAAI,GAAGc,IAAI,CAACE,UAAU,CAAC,CAAC,CAAC,CAACE,OAAO,CAACnB,KAAK,CACpCoB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACpB,IAAI,IAAI,EAAE,CAAC,CAC5BqB,IAAI,CAAC,EAAE,CAAC;IACb,CAAC,MAAM;MACL7B,OAAO,CAAC8B,IAAI,CAAC,oCAAoC,EAAER,IAAI,CAAC;MACxD,MAAM,IAAIpB,KAAK,CAAC,mCAAmC,CAAC;IACtD;IAEA,OAAOM,IAAI;EACb,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}