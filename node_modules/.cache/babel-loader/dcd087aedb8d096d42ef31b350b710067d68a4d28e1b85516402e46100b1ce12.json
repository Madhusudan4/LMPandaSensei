{"ast":null,"code":"// src/services/aiService.js\nconst API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\nconst API_URL = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent\";\nexport const queryGeminiAI = async message => {\n  try {\n    // Make sure API key is available\n    if (!API_KEY) {\n      console.error(\"Missing Gemini API key. Set REACT_APP_GEMINI_API_KEY in your environment.\");\n      throw new Error(\"API key not configured\");\n    }\n    console.log(\"Sending query to Gemini API:\", message);\n\n    // Prepare the request\n    const response = await fetch(`${API_URL}?key=${API_KEY}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: message\n          }]\n        }],\n        generationConfig: {\n          temperature: 0.7,\n          topK: 40,\n          topP: 0.95,\n          maxOutputTokens: 1024\n        }\n      })\n    });\n\n    // Check if response is OK\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"Gemini API error:\", errorText);\n      throw new Error(`Gemini API returned status ${response.status}: ${errorText}`);\n    }\n\n    // Parse response\n    const data = await response.json();\n\n    // Log response structure for debugging\n    console.log(\"Gemini API response structure:\", JSON.stringify(data, null, 2));\n\n    // Extract the response text\n    let responseText = \"\";\n    if (data.candidates && data.candidates.length > 0 && data.candidates[0].content && data.candidates[0].content.parts) {\n      responseText = data.candidates[0].content.parts.map(part => part.text || \"\").join(\"\");\n    } else {\n      console.warn(\"Unexpected response structure from Gemini API:\", data);\n      responseText = \"I received a response but couldn't parse it correctly. Please try again.\";\n    }\n    return responseText;\n  } catch (error) {\n    console.error(\"Error querying Gemini API:\", error);\n    throw error;\n  }\n};\n\n// Optional: Add a simpler fallback function for testing\nexport const fallbackResponse = async message => {\n  // Wait a bit to simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 800));\n\n  // Generate a contextual response\n  if (message.toLowerCase().includes(\"hello\") || message.toLowerCase().includes(\"hi\")) {\n    return \"Hello! How can I help you with your logistics needs today?\";\n  } else if (message.toLowerCase().includes(\"track\") || message.toLowerCase().includes(\"order\")) {\n    return \"To track your order, I'll need the tracking number or order ID. Could you provide that information?\";\n  } else if (message.toLowerCase().includes(\"delivery\") || message.toLowerCase().includes(\"shipping\")) {\n    return \"Our logistics network covers all of India. We offer various delivery options including same-day, next-day, and standard delivery. What specific information do you need?\";\n  } else if (message.toLowerCase().includes(\"document\") || message.toLowerCase().includes(\"upload\")) {\n    return \"You can upload shipping manifests, invoices, or other logistics documents using the paperclip icon. I'll analyze them and help you with any related questions.\";\n  } else {\n    return \"Thank you for your message. I'm your logistics assistant and can help with tracking, delivery options, shipping costs, and more. What specific information are you looking for?\";\n  }\n};","map":{"version":3,"names":["API_KEY","process","env","REACT_APP_GEMINI_API_KEY","API_URL","queryGeminiAI","message","console","error","Error","log","response","fetch","method","headers","body","JSON","stringify","contents","parts","text","generationConfig","temperature","topK","topP","maxOutputTokens","ok","errorText","status","data","json","responseText","candidates","length","content","map","part","join","warn","fallbackResponse","Promise","resolve","setTimeout","toLowerCase","includes"],"sources":["/Users/madhu.sudhan/Documents/logistics-chatbot/src/services/aiService.js"],"sourcesContent":["// src/services/aiService.js\nconst API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\nconst API_URL = \"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent\";\n\nexport const queryGeminiAI = async (message) => {\n  try {\n    // Make sure API key is available\n    if (!API_KEY) {\n      console.error(\"Missing Gemini API key. Set REACT_APP_GEMINI_API_KEY in your environment.\");\n      throw new Error(\"API key not configured\");\n    }\n\n    console.log(\"Sending query to Gemini API:\", message);\n    \n    // Prepare the request\n    const response = await fetch(`${API_URL}?key=${API_KEY}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        contents: [\n          {\n            parts: [\n              {\n                text: message\n              }\n            ]\n          }\n        ],\n        generationConfig: {\n          temperature: 0.7,\n          topK: 40,\n          topP: 0.95,\n          maxOutputTokens: 1024,\n        }\n      })\n    });\n\n    // Check if response is OK\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"Gemini API error:\", errorText);\n      throw new Error(`Gemini API returned status ${response.status}: ${errorText}`);\n    }\n\n    // Parse response\n    const data = await response.json();\n    \n    // Log response structure for debugging\n    console.log(\"Gemini API response structure:\", JSON.stringify(data, null, 2));\n    \n    // Extract the response text\n    let responseText = \"\";\n    if (data.candidates && data.candidates.length > 0 && \n        data.candidates[0].content && data.candidates[0].content.parts) {\n      responseText = data.candidates[0].content.parts\n        .map(part => part.text || \"\")\n        .join(\"\");\n    } else {\n      console.warn(\"Unexpected response structure from Gemini API:\", data);\n      responseText = \"I received a response but couldn't parse it correctly. Please try again.\";\n    }\n    \n    return responseText;\n  } catch (error) {\n    console.error(\"Error querying Gemini API:\", error);\n    throw error;\n  }\n};\n\n// Optional: Add a simpler fallback function for testing\nexport const fallbackResponse = async (message) => {\n  // Wait a bit to simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 800));\n  \n  // Generate a contextual response\n  if (message.toLowerCase().includes(\"hello\") || message.toLowerCase().includes(\"hi\")) {\n    return \"Hello! How can I help you with your logistics needs today?\";\n  } else if (message.toLowerCase().includes(\"track\") || message.toLowerCase().includes(\"order\")) {\n    return \"To track your order, I'll need the tracking number or order ID. Could you provide that information?\";\n  } else if (message.toLowerCase().includes(\"delivery\") || message.toLowerCase().includes(\"shipping\")) {\n    return \"Our logistics network covers all of India. We offer various delivery options including same-day, next-day, and standard delivery. What specific information do you need?\";\n  } else if (message.toLowerCase().includes(\"document\") || message.toLowerCase().includes(\"upload\")) {\n    return \"You can upload shipping manifests, invoices, or other logistics documents using the paperclip icon. I'll analyze them and help you with any related questions.\";\n  } else {\n    return \"Thank you for your message. I'm your logistics assistant and can help with tracking, delivery options, shipping costs, and more. What specific information are you looking for?\";\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}