{"ast":null,"code":"// src/services/documentService.js\nimport{setDocumentContext}from'./aiService';export const processDocument=async file=>{return new Promise((resolve,reject)=>{try{const reader=new FileReader();reader.onload=async e=>{try{// For demonstration we'll simulate document text extraction\n// In a real app, you'd have more sophisticated document parsing\nconst content=e.target.result;// Basic document chunking - split by paragraphs and sections\nlet chunks=[];if(file.type==='application/pdf'){// Simulate PDF processing\nchunks=simulatePdfProcessing(content);}else if(file.type.includes('text')){// Process text files\nchunks=content.split('\\n\\n').filter(chunk=>chunk.trim().length>0);}else if(file.type.includes('word')||file.name.endsWith('.docx')||file.name.endsWith('.doc')){// Simulate Word document processing\nchunks=simulateWordProcessing(content);}else{// Generic text extraction\nchunks=content.split('\\n').filter(chunk=>chunk.trim().length>0);}// Update the AI service with document context\nsetDocumentContext(chunks);resolve(chunks.length);}catch(error){console.error(\"Error processing document content:\",error);reject(error);}};reader.onerror=()=>{reject(new Error(\"Failed to read the file\"));};// Read the file based on type\nif(file.type==='application/pdf'||file.type.includes('word')||file.type.includes('application/vnd.openxmlformats-officedocument')){reader.readAsArrayBuffer(file);}else{reader.readAsText(file);}}catch(error){console.error(\"Error setting up document processing:\",error);reject(error);}});};// Simulation functions for document processing\nfunction simulatePdfProcessing(content){// This is a placeholder. In a real app, you'd use a PDF.js or similar library\n// For now, we'll create fake chunks based on the file size\nconst chunks=[];const size=content.byteLength;const numChunks=Math.max(3,Math.min(10,Math.floor(size/5000)));for(let i=0;i<numChunks;i++){chunks.push(`[Document section ${i+1}] This section contains logistics information about shipping routes, delivery timeframes, and package handling procedures for the Indian market. Key points include delivery standards, shipping zones, and logistics operations.`);}return chunks;}function simulateWordProcessing(content){// Placeholder for Word document processing\nconst chunks=[];const size=content.byteLength;const numChunks=Math.max(3,Math.min(8,Math.floor(size/4000)));for(let i=0;i<numChunks;i++){chunks.push(`[Document section ${i+1}] This section contains logistics information about delivery processes, customer service protocols, and last-mile delivery operations in India. Topics include urban delivery strategies, rural logistics challenges, and delivery scheduling procedures.`);}return chunks;}","map":{"version":3,"names":["setDocumentContext","processDocument","file","Promise","resolve","reject","reader","FileReader","onload","e","content","target","result","chunks","type","simulatePdfProcessing","includes","split","filter","chunk","trim","length","name","endsWith","simulateWordProcessing","error","console","onerror","Error","readAsArrayBuffer","readAsText","size","byteLength","numChunks","Math","max","min","floor","i","push"],"sources":["/Users/madhusudhan/Documents/GitHub/LMPandaSensei/src/services/documentService.js"],"sourcesContent":["// src/services/documentService.js\nimport { setDocumentContext } from './aiService';\n\nexport const processDocument = async (file) => {\n  return new Promise((resolve, reject) => {\n    try {\n      const reader = new FileReader();\n      \n      reader.onload = async (e) => {\n        try {\n          // For demonstration we'll simulate document text extraction\n          // In a real app, you'd have more sophisticated document parsing\n          const content = e.target.result;\n          \n          // Basic document chunking - split by paragraphs and sections\n          let chunks = [];\n          \n          if (file.type === 'application/pdf') {\n            // Simulate PDF processing\n            chunks = simulatePdfProcessing(content);\n          } else if (file.type.includes('text')) {\n            // Process text files\n            chunks = content.split('\\n\\n')\n              .filter(chunk => chunk.trim().length > 0);\n          } else if (file.type.includes('word') || file.name.endsWith('.docx') || file.name.endsWith('.doc')) {\n            // Simulate Word document processing\n            chunks = simulateWordProcessing(content);\n          } else {\n            // Generic text extraction\n            chunks = content.split('\\n')\n              .filter(chunk => chunk.trim().length > 0);\n          }\n          \n          // Update the AI service with document context\n          setDocumentContext(chunks);\n          \n          resolve(chunks.length);\n        } catch (error) {\n          console.error(\"Error processing document content:\", error);\n          reject(error);\n        }\n      };\n      \n      reader.onerror = () => {\n        reject(new Error(\"Failed to read the file\"));\n      };\n      \n      // Read the file based on type\n      if (file.type === 'application/pdf' || file.type.includes('word') || file.type.includes('application/vnd.openxmlformats-officedocument')) {\n        reader.readAsArrayBuffer(file);\n      } else {\n        reader.readAsText(file);\n      }\n    } catch (error) {\n      console.error(\"Error setting up document processing:\", error);\n      reject(error);\n    }\n  });\n};\n\n// Simulation functions for document processing\nfunction simulatePdfProcessing(content) {\n  // This is a placeholder. In a real app, you'd use a PDF.js or similar library\n  // For now, we'll create fake chunks based on the file size\n  const chunks = [];\n  const size = content.byteLength;\n  const numChunks = Math.max(3, Math.min(10, Math.floor(size / 5000)));\n  \n  for (let i = 0; i < numChunks; i++) {\n    chunks.push(`[Document section ${i+1}] This section contains logistics information about shipping routes, delivery timeframes, and package handling procedures for the Indian market. Key points include delivery standards, shipping zones, and logistics operations.`);\n  }\n  \n  return chunks;\n}\n\nfunction simulateWordProcessing(content) {\n  // Placeholder for Word document processing\n  const chunks = [];\n  const size = content.byteLength;\n  const numChunks = Math.max(3, Math.min(8, Math.floor(size / 4000)));\n  \n  for (let i = 0; i < numChunks; i++) {\n    chunks.push(`[Document section ${i+1}] This section contains logistics information about delivery processes, customer service protocols, and last-mile delivery operations in India. Topics include urban delivery strategies, rural logistics challenges, and delivery scheduling procedures.`);\n  }\n  \n  return chunks;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}