{"ast":null,"code":"// In ChatInterface.js, update the handleSend function\nconst handleSend = async () => {\n  if (input.trim() === '' || isLoading) return;\n  const userMessage = {\n    text: input,\n    isUser: true,\n    timestamp: new Date().toISOString()\n  };\n  setMessages(prev => [...prev, userMessage]);\n  setInput('');\n  setIsLoading(true);\n  try {\n    let response;\n    try {\n      // First try the real Gemini API\n      response = await queryGeminiAI(input);\n    } catch (apiError) {\n      console.error(\"Gemini API error, falling back to local response:\", apiError);\n\n      // If that fails, use the fallback\n      if (process.env.NODE_ENV === 'development') {\n        response = await fallbackResponse(input);\n      } else {\n        // In production, still show the error to the user\n        throw apiError;\n      }\n    }\n    const botMessage = {\n      text: response,\n      isUser: false,\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, botMessage]);\n  } catch (error) {\n    console.error(\"Error getting response:\", error);\n    const errorMessage = {\n      text: \"I'm having trouble processing your request right now. Please try again later.\",\n      isUser: false,\n      isError: true,\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, errorMessage]);\n  } finally {\n    setIsLoading(false);\n  }\n};","map":{"version":3,"names":["handleSend","input","trim","isLoading","userMessage","text","isUser","timestamp","Date","toISOString","setMessages","prev","setInput","setIsLoading","response","queryGeminiAI","apiError","console","error","process","env","NODE_ENV","fallbackResponse","botMessage","errorMessage","isError"],"sources":["/Users/madhu.sudhan/Documents/logistics-chatbot/src/components/ChatInterface.js"],"sourcesContent":["// In ChatInterface.js, update the handleSend function\nconst handleSend = async () => {\n  if (input.trim() === '' || isLoading) return;\n  \n  const userMessage = {\n    text: input,\n    isUser: true,\n    timestamp: new Date().toISOString()\n  };\n  \n  setMessages(prev => [...prev, userMessage]);\n  setInput('');\n  setIsLoading(true);\n  \n  try {\n    let response;\n    \n    try {\n      // First try the real Gemini API\n      response = await queryGeminiAI(input);\n    } catch (apiError) {\n      console.error(\"Gemini API error, falling back to local response:\", apiError);\n      \n      // If that fails, use the fallback\n      if (process.env.NODE_ENV === 'development') {\n        response = await fallbackResponse(input);\n      } else {\n        // In production, still show the error to the user\n        throw apiError;\n      }\n    }\n    \n    const botMessage = {\n      text: response,\n      isUser: false,\n      timestamp: new Date().toISOString()\n    };\n    \n    setMessages(prev => [...prev, botMessage]);\n  } catch (error) {\n    console.error(\"Error getting response:\", error);\n    \n    const errorMessage = {\n      text: \"I'm having trouble processing your request right now. Please try again later.\",\n      isUser: false,\n      isError: true,\n      timestamp: new Date().toISOString()\n    };\n    \n    setMessages(prev => [...prev, errorMessage]);\n  } finally {\n    setIsLoading(false);\n  }\n};\n"],"mappings":"AAAA;AACA,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;EAC7B,IAAIC,KAAK,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIC,SAAS,EAAE;EAEtC,MAAMC,WAAW,GAAG;IAClBC,IAAI,EAAEJ,KAAK;IACXK,MAAM,EAAE,IAAI;IACZC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC;EAEDC,WAAW,CAACC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEP,WAAW,CAAC,CAAC;EAC3CQ,QAAQ,CAAC,EAAE,CAAC;EACZC,YAAY,CAAC,IAAI,CAAC;EAElB,IAAI;IACF,IAAIC,QAAQ;IAEZ,IAAI;MACF;MACAA,QAAQ,GAAG,MAAMC,aAAa,CAACd,KAAK,CAAC;IACvC,CAAC,CAAC,OAAOe,QAAQ,EAAE;MACjBC,OAAO,CAACC,KAAK,CAAC,mDAAmD,EAAEF,QAAQ,CAAC;;MAE5E;MACA,IAAIG,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;QAC1CP,QAAQ,GAAG,MAAMQ,gBAAgB,CAACrB,KAAK,CAAC;MAC1C,CAAC,MAAM;QACL;QACA,MAAMe,QAAQ;MAChB;IACF;IAEA,MAAMO,UAAU,GAAG;MACjBlB,IAAI,EAAES,QAAQ;MACdR,MAAM,EAAE,KAAK;MACbC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IAEDC,WAAW,CAACC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEY,UAAU,CAAC,CAAC;EAC5C,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAE/C,MAAMM,YAAY,GAAG;MACnBnB,IAAI,EAAE,+EAA+E;MACrFC,MAAM,EAAE,KAAK;MACbmB,OAAO,EAAE,IAAI;MACblB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IAEDC,WAAW,CAACC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEa,YAAY,CAAC,CAAC;EAC9C,CAAC,SAAS;IACRX,YAAY,CAAC,KAAK,CAAC;EACrB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}