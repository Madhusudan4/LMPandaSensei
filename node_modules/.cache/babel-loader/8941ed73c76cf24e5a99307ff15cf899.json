{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Initialize the Gemini API\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY);\n\n// Function to query the Gemini model with context from documents\nexport async function queryGeminiAI(prompt) {\n  try {\n    // Get stored documents\n    const docsString = localStorage.getItem('logisticsDocs') || '[]';\n    const docs = JSON.parse(docsString);\n\n    // Simple semantic search to find relevant document chunks\n    const relevantDocs = findRelevantDocuments(docs, prompt);\n\n    // Build context from relevant docs\n    const context = buildContextFromDocs(relevantDocs);\n\n    // Prepare system instructions\n    const systemInstruction = \"You are an AI assistant specializing in Last Mile Logistics in India. \" + \"Provide accurate, helpful information related to logistics, supply chain, delivery, \" + \"and transportation in the Indian context. If you don't know the answer, admit it \" + \"rather than making up information. Use professional, clear language and provide \" + \"actionable insights when possible.\";\n\n    // Build the full prompt with context and system instruction\n    const fullPrompt = buildFullPrompt(prompt, context, systemInstruction);\n\n    // Query the Gemini model\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-pro\"\n    });\n    const result = await model.generateContent(fullPrompt);\n    const response = await result.response;\n    return response.text();\n  } catch (error) {\n    console.error(\"Error querying Gemini API:\", error);\n    throw error;\n  }\n}\n\n// Helper function to find relevant document chunks based on keyword matching\nfunction findRelevantDocuments(docs, query) {\n  // If we don't have many documents, return all of them\n  if (docs.length <= 5) return docs;\n  const queryWords = query.toLowerCase().split(/\\s+/).filter(word => word.length > 3).filter(word => !['what', 'when', 'where', 'which', 'how', 'why', 'who', 'this', 'that', 'there', 'their', 'about', 'with'].includes(word));\n\n  // Score each document based on keyword matches\n  const scoredDocs = docs.map(doc => {\n    const content = doc.content.toLowerCase();\n    let score = 0;\n\n    // Score based on number of query words present in the document\n    for (const word of queryWords) {\n      if (content.includes(word)) {\n        score += 1;\n\n        // Bonus points for documents with words in close proximity\n        if (queryWords.length > 1) {\n          const otherWords = queryWords.filter(w => w !== word);\n          for (const otherWord of otherWords) {\n            const idx1 = content.indexOf(word);\n            const idx2 = content.indexOf(otherWord);\n            if (idx1 >= 0 && idx2 >= 0 && Math.abs(idx1 - idx2) < 50) {\n              score += 0.5;\n            }\n          }\n        }\n      }\n    }\n    return {\n      doc,\n      score\n    };\n  });\n\n  // Sort by score and take the top 3\n  return scoredDocs.sort((a, b) => b.score - a.score).slice(0, 3).filter(item => item.score > 0).map(item => item.doc);\n}\n\n// Helper function to build context from documents\nfunction buildContextFromDocs(docs) {\n  if (docs.length === 0) return '';\n  return docs.map((doc, index) => {\n    return `Document ${index + 1}:\\n${doc.content}`;\n  }).join('\\n\\n');\n}\n\n// Helper function to build the full prompt\nfunction buildFullPrompt(prompt, context, systemInstruction) {\n  let fullPrompt = systemInstruction + \"\\n\\n\";\n  if (context) {\n    fullPrompt += \"Here is some context about Indian last mile logistics that may help answer the query:\\n\\n\" + context + \"\\n\\n\";\n  }\n  fullPrompt += \"User query: \" + prompt;\n  return fullPrompt;\n}","map":{"version":3,"names":["GoogleGenerativeAI","genAI","process","env","REACT_APP_GEMINI_API_KEY","queryGeminiAI","prompt","docsString","localStorage","getItem","docs","JSON","parse","relevantDocs","findRelevantDocuments","context","buildContextFromDocs","systemInstruction","fullPrompt","buildFullPrompt","model","getGenerativeModel","result","generateContent","response","text","error","console","query","length","queryWords","toLowerCase","split","filter","word","includes","scoredDocs","map","doc","content","score","otherWords","w","otherWord","idx1","indexOf","idx2","Math","abs","sort","a","b","slice","item","index","join"],"sources":["/Users/madhu.sudhan/Documents/logistics-chatbot/src/services/aiService.js"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Initialize the Gemini API\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY);\n\n// Function to query the Gemini model with context from documents\nexport async function queryGeminiAI(prompt) {\n  try {\n    // Get stored documents\n    const docsString = localStorage.getItem('logisticsDocs') || '[]';\n    const docs = JSON.parse(docsString);\n    \n    // Simple semantic search to find relevant document chunks\n    const relevantDocs = findRelevantDocuments(docs, prompt);\n    \n    // Build context from relevant docs\n    const context = buildContextFromDocs(relevantDocs);\n    \n    // Prepare system instructions\n    const systemInstruction = \n      \"You are an AI assistant specializing in Last Mile Logistics in India. \" +\n      \"Provide accurate, helpful information related to logistics, supply chain, delivery, \" +\n      \"and transportation in the Indian context. If you don't know the answer, admit it \" +\n      \"rather than making up information. Use professional, clear language and provide \" +\n      \"actionable insights when possible.\";\n    \n    // Build the full prompt with context and system instruction\n    const fullPrompt = buildFullPrompt(prompt, context, systemInstruction);\n\n    // Query the Gemini model\n    const model = genAI.getGenerativeModel({ model: \"gemini-pro\" });\n    const result = await model.generateContent(fullPrompt);\n    const response = await result.response;\n    return response.text();\n  } catch (error) {\n    console.error(\"Error querying Gemini API:\", error);\n    throw error;\n  }\n}\n\n// Helper function to find relevant document chunks based on keyword matching\nfunction findRelevantDocuments(docs, query) {\n  // If we don't have many documents, return all of them\n  if (docs.length <= 5) return docs;\n  \n  const queryWords = query.toLowerCase().split(/\\s+/)\n    .filter(word => word.length > 3)\n    .filter(word => !['what', 'when', 'where', 'which', 'how', 'why', 'who', 'this', 'that', 'there', 'their', 'about', 'with'].includes(word));\n  \n  // Score each document based on keyword matches\n  const scoredDocs = docs.map(doc => {\n    const content = doc.content.toLowerCase();\n    let score = 0;\n    \n    // Score based on number of query words present in the document\n    for (const word of queryWords) {\n      if (content.includes(word)) {\n        score += 1;\n        \n        // Bonus points for documents with words in close proximity\n        if (queryWords.length > 1) {\n          const otherWords = queryWords.filter(w => w !== word);\n          for (const otherWord of otherWords) {\n            const idx1 = content.indexOf(word);\n            const idx2 = content.indexOf(otherWord);\n            if (idx1 >= 0 && idx2 >= 0 && Math.abs(idx1 - idx2) < 50) {\n              score += 0.5;\n            }\n          }\n        }\n      }\n    }\n    \n    return { doc, score };\n  });\n  \n  // Sort by score and take the top 3\n  return scoredDocs\n    .sort((a, b) => b.score - a.score)\n    .slice(0, 3)\n    .filter(item => item.score > 0)\n    .map(item => item.doc);\n}\n\n// Helper function to build context from documents\nfunction buildContextFromDocs(docs) {\n  if (docs.length === 0) return '';\n  \n  return docs.map((doc, index) => {\n    return `Document ${index + 1}:\\n${doc.content}`;\n  }).join('\\n\\n');\n}\n\n// Helper function to build the full prompt\nfunction buildFullPrompt(prompt, context, systemInstruction) {\n  let fullPrompt = systemInstruction + \"\\n\\n\";\n  \n  if (context) {\n    fullPrompt += \"Here is some context about Indian last mile logistics that may help answer the query:\\n\\n\" +\n                 context + \"\\n\\n\";\n  }\n  \n  fullPrompt += \"User query: \" + prompt;\n  return fullPrompt;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}