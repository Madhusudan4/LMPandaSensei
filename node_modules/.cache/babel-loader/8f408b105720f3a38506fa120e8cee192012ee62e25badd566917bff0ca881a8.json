{"ast":null,"code":"// src/services/aiService.js\nlet documentContext = [];\nexport const setDocumentContext = context => {\n  documentContext = context;\n  console.log(\"Document context updated:\", documentContext.length, \"chunks\");\n};\nexport const queryGeminiAI = async message => {\n  try {\n    const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n\n    // Better error checking for API key\n    if (!API_KEY) {\n      console.error(\"Missing Gemini API key. Set REACT_APP_GEMINI_API_KEY in your environment.\");\n      console.log(\"Current env vars:\", process.env);\n      throw new Error(\"API key not configured\");\n    }\n    console.log(\"Using API key starting with:\", API_KEY.substring(0, 3) + \"...\" + API_KEY.slice(-3));\n\n    // Prepare system prompt\n    let systemPrompt = \"You are an AI assistant specializing in last mile logistics in India. \";\n    systemPrompt += \"Provide detailed, accurate information about delivery services, tracking, shipping costs, and logistics coverage areas in India. \";\n    systemPrompt += \"Be helpful, concise, and focus on Indian logistics context.\";\n\n    // Add document context if available\n    let contextPrompt = \"\";\n    if (documentContext && documentContext.length > 0) {\n      contextPrompt = \"\\n\\nThe user has uploaded the following document information that you can reference:\\n\";\n      const relevantChunks = documentContext.slice(0, 5);\n      relevantChunks.forEach((chunk, i) => {\n        contextPrompt += `\\nDocument Chunk ${i + 1}:\\n${chunk}\\n`;\n      });\n      contextPrompt += \"\\nPlease use this document information when relevant to answer the user's question.\";\n    }\n\n    // Combine the system prompt, context, and user message\n    const fullPrompt = `${systemPrompt}${contextPrompt}\\n\\nUser question: ${message}`;\n\n    // Format the request - now using the prompts we created\n    const requestBody = {\n      contents: [{\n        parts: [{\n          text: fullPrompt\n        }]\n      }],\n      generationConfig: {\n        temperature: 0.7,\n        maxOutputTokens: 800\n      }\n    };\n    console.log(\"Sending request to Gemini API for:\", message);\n    console.log(\"API URL:\", `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${API_KEY.substring(0, 3)}...`);\n\n    // Send the request\n    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${API_KEY}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(requestBody)\n    });\n    console.log(\"API Response status:\", response.status);\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"API Error:\", response.status, errorText);\n      throw new Error(`API error: ${response.status} ${errorText}`);\n    }\n    const data = await response.json();\n    console.log(\"API Response data structure:\", Object.keys(data));\n\n    // Extract text from the response\n    let text = \"\";\n    if (data.candidates && data.candidates.length > 0 && data.candidates[0].content && data.candidates[0].content.parts) {\n      text = data.candidates[0].content.parts.map(part => part.text || \"\").join(\"\");\n      console.log(\"Successfully extracted text, length:\", text.length);\n    } else {\n      console.warn(\"Unexpected API response structure:\", JSON.stringify(data, null, 2));\n      throw new Error(\"Unexpected API response structure\");\n    }\n    return text;\n  } catch (error) {\n    console.error(\"Error in queryGeminiAI:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["documentContext","setDocumentContext","context","console","log","length","queryGeminiAI","message","API_KEY","process","env","REACT_APP_GEMINI_API_KEY","error","Error","substring","slice","systemPrompt","contextPrompt","relevantChunks","forEach","chunk","i","fullPrompt","requestBody","contents","parts","text","generationConfig","temperature","maxOutputTokens","response","fetch","method","headers","body","JSON","stringify","status","ok","errorText","data","json","Object","keys","candidates","content","map","part","join","warn"],"sources":["/Users/madhu.sudhan/Documents/logistics-chatbot/src/services/aiService.js"],"sourcesContent":["// src/services/aiService.js\nlet documentContext = [];\n\nexport const setDocumentContext = (context) => {\n  documentContext = context;\n  console.log(\"Document context updated:\", documentContext.length, \"chunks\");\n};\n\nexport const queryGeminiAI = async (message) => {\n  try {\n    const API_KEY = process.env.REACT_APP_GEMINI_API_KEY;\n    \n    // Better error checking for API key\n    if (!API_KEY) {\n      console.error(\"Missing Gemini API key. Set REACT_APP_GEMINI_API_KEY in your environment.\");\n      console.log(\"Current env vars:\", process.env);\n      throw new Error(\"API key not configured\");\n    }\n\n    console.log(\"Using API key starting with:\", API_KEY.substring(0, 3) + \"...\" + API_KEY.slice(-3));\n\n    // Prepare system prompt\n    let systemPrompt = \"You are an AI assistant specializing in last mile logistics in India. \";\n    systemPrompt += \"Provide detailed, accurate information about delivery services, tracking, shipping costs, and logistics coverage areas in India. \";\n    systemPrompt += \"Be helpful, concise, and focus on Indian logistics context.\";\n    \n    // Add document context if available\n    let contextPrompt = \"\";\n    if (documentContext && documentContext.length > 0) {\n      contextPrompt = \"\\n\\nThe user has uploaded the following document information that you can reference:\\n\";\n      const relevantChunks = documentContext.slice(0, 5);\n      relevantChunks.forEach((chunk, i) => {\n        contextPrompt += `\\nDocument Chunk ${i+1}:\\n${chunk}\\n`;\n      });\n      contextPrompt += \"\\nPlease use this document information when relevant to answer the user's question.\";\n    }\n\n    // Combine the system prompt, context, and user message\n    const fullPrompt = `${systemPrompt}${contextPrompt}\\n\\nUser question: ${message}`;\n\n    // Format the request - now using the prompts we created\n    const requestBody = {\n      contents: [\n        {\n          parts: [\n            { text: fullPrompt }\n          ]\n        }\n      ],\n      generationConfig: {\n        temperature: 0.7,\n        maxOutputTokens: 800\n      }\n    };\n    \n    console.log(\"Sending request to Gemini API for:\", message);\n    console.log(\"API URL:\", `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${API_KEY.substring(0, 3)}...`);\n    \n    // Send the request\n    const response = await fetch(\n      `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${API_KEY}`,\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(requestBody)\n      }\n    );\n\n    console.log(\"API Response status:\", response.status);\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"API Error:\", response.status, errorText);\n      throw new Error(`API error: ${response.status} ${errorText}`);\n    }\n\n    const data = await response.json();\n    console.log(\"API Response data structure:\", Object.keys(data));\n    \n    // Extract text from the response\n    let text = \"\";\n    if (data.candidates && \n        data.candidates.length > 0 && \n        data.candidates[0].content && \n        data.candidates[0].content.parts) {\n      text = data.candidates[0].content.parts\n        .map(part => part.text || \"\")\n        .join(\"\");\n      console.log(\"Successfully extracted text, length:\", text.length);\n    } else {\n      console.warn(\"Unexpected API response structure:\", JSON.stringify(data, null, 2));\n      throw new Error(\"Unexpected API response structure\");\n    }\n    \n    return text;\n  } catch (error) {\n    console.error(\"Error in queryGeminiAI:\", error);\n    throw error;\n  }\n};\n"],"mappings":"AAAA;AACA,IAAIA,eAAe,GAAG,EAAE;AAExB,OAAO,MAAMC,kBAAkB,GAAIC,OAAO,IAAK;EAC7CF,eAAe,GAAGE,OAAO;EACzBC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEJ,eAAe,CAACK,MAAM,EAAE,QAAQ,CAAC;AAC5E,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAOC,OAAO,IAAK;EAC9C,IAAI;IACF,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;;IAEpD;IACA,IAAI,CAACH,OAAO,EAAE;MACZL,OAAO,CAACS,KAAK,CAAC,2EAA2E,CAAC;MAC1FT,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEK,OAAO,CAACC,GAAG,CAAC;MAC7C,MAAM,IAAIG,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEAV,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEI,OAAO,CAACM,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,KAAK,GAAGN,OAAO,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEhG;IACA,IAAIC,YAAY,GAAG,wEAAwE;IAC3FA,YAAY,IAAI,mIAAmI;IACnJA,YAAY,IAAI,6DAA6D;;IAE7E;IACA,IAAIC,aAAa,GAAG,EAAE;IACtB,IAAIjB,eAAe,IAAIA,eAAe,CAACK,MAAM,GAAG,CAAC,EAAE;MACjDY,aAAa,GAAG,wFAAwF;MACxG,MAAMC,cAAc,GAAGlB,eAAe,CAACe,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;MAClDG,cAAc,CAACC,OAAO,CAAC,CAACC,KAAK,EAAEC,CAAC,KAAK;QACnCJ,aAAa,IAAI,oBAAoBI,CAAC,GAAC,CAAC,MAAMD,KAAK,IAAI;MACzD,CAAC,CAAC;MACFH,aAAa,IAAI,qFAAqF;IACxG;;IAEA;IACA,MAAMK,UAAU,GAAG,GAAGN,YAAY,GAAGC,aAAa,sBAAsBV,OAAO,EAAE;;IAEjF;IACA,MAAMgB,WAAW,GAAG;MAClBC,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,CACL;UAAEC,IAAI,EAAEJ;QAAW,CAAC;MAExB,CAAC,CACF;MACDK,gBAAgB,EAAE;QAChBC,WAAW,EAAE,GAAG;QAChBC,eAAe,EAAE;MACnB;IACF,CAAC;IAED1B,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEG,OAAO,CAAC;IAC1DJ,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE,0FAA0FI,OAAO,CAACM,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC;;IAE/I;IACA,MAAMgB,QAAQ,GAAG,MAAMC,KAAK,CAC1B,0FAA0FvB,OAAO,EAAE,EACnG;MACEwB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,WAAW;IAClC,CACF,CAAC;IAEDpB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE0B,QAAQ,CAACO,MAAM,CAAC;IAEpD,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACJ,IAAI,CAAC,CAAC;MACvCvB,OAAO,CAACS,KAAK,CAAC,YAAY,EAAEkB,QAAQ,CAACO,MAAM,EAAEE,SAAS,CAAC;MACvD,MAAM,IAAI1B,KAAK,CAAC,cAAciB,QAAQ,CAACO,MAAM,IAAIE,SAAS,EAAE,CAAC;IAC/D;IAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClCtC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEsC,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,CAAC;;IAE9D;IACA,IAAId,IAAI,GAAG,EAAE;IACb,IAAIc,IAAI,CAACI,UAAU,IACfJ,IAAI,CAACI,UAAU,CAACvC,MAAM,GAAG,CAAC,IAC1BmC,IAAI,CAACI,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,IAC1BL,IAAI,CAACI,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,CAACpB,KAAK,EAAE;MACpCC,IAAI,GAAGc,IAAI,CAACI,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,CAACpB,KAAK,CACpCqB,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACrB,IAAI,IAAI,EAAE,CAAC,CAC5BsB,IAAI,CAAC,EAAE,CAAC;MACX7C,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEsB,IAAI,CAACrB,MAAM,CAAC;IAClE,CAAC,MAAM;MACLF,OAAO,CAAC8C,IAAI,CAAC,oCAAoC,EAAEd,IAAI,CAACC,SAAS,CAACI,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;MACjF,MAAM,IAAI3B,KAAK,CAAC,mCAAmC,CAAC;IACtD;IAEA,OAAOa,IAAI;EACb,CAAC,CAAC,OAAOd,KAAK,EAAE;IACdT,OAAO,CAACS,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}